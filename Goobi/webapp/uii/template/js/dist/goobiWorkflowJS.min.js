var goobiWorkflowJS = ( function() {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    var goobiWorkflow = {
        currentView: ''
    };
    
    goobiWorkflow.init = function( config ) {
        if ( _debug ) {
            console.log( 'Initializing: goobiWorkflow.init' );
            console.log( '--> config = ', config );
        }
        
        $.extend( true, _defaults, config );

        // throw some console infos
        console.info( 'Current View: ', _defaults.currentView );

        // enable BS tooltips
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

        // enable BS popver
        $(function () {
            $( "[data-toggle='popover']" ).popover({
                html: true
            });
        });

        // init menu
        goobiWorkflowJS.menu.init();

        // init layout
        goobiWorkflowJS.layout.init();
        
        // init module box
        goobiWorkflowJS.box.init();
        
        // init buttons
        goobiWorkflowJS.buttons.init();
        
        // TODO: init tinyMCE if needed
        // goobiWorkflowJS.tinymce.init(...);
    }

    return goobiWorkflow;
    
} )( jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.box = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.box.init' );
            }
            
            if ( $( '.module__box' ).hasClass( 'module__box--collapsable' ) ) {
                _setToggleBoxBodyEvent();
            }

            // set box event on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            if ( $( '.module__box' ).hasClass( 'module__box--collapsable' ) ) {
                                _setToggleBoxBodyEvent();
                            }
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setToggleBoxBodyEvent
     */
    function _setToggleBoxBodyEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setToggleBoxBodyEvent' );
        }

        $( '.module__box-title h3' ).off( 'click' ).on( 'click', function () {
            $( this ).find( '[data-toggle="box-body"]' ).toggleClass( 'in' );
            $( this ).parents( '.module__box-title' ).next().slideToggle( 200 );
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.buttons = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.buttons.init' );
            }

            if ( $( '.btn' ).hasClass( 'btn--toggle' ) ) {
                _setButtonToggleEvent();
            }

            // set button events on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            if ( $( '.btn' ).hasClass( 'btn--toggle' ) ) {
                                _setButtonToggleEvent();
                            }
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the event listener to button toggle.
     * @method _setButtonToggleEvent
     */
    function _setButtonToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setButtonToggleEvent' );
        }

        $( '.btn--toggle' ).off( 'click' ).on( 'click', function () {
            $( this ).next( 'div' ).slideToggle( 300 );
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _columns = {
        left: 0,
        center: 0,
        right: 0,
        handles: {
            left: 0,
            right: 0
        }
    }
    var _defaults = {};
    
    goobiWorkflow.layout = {
        /**
         * @description Method to initialize the layout module.
         * @method init
        */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.layout.init' );
            }

            // set resizable elements
            if ( window.matchMedia( '(min-width: 769px)' ).matches ) {
                _setResizableElements();
            }

            // get saved widths from session storage
            _getSavedWidths();

            // set initial position of toc actions
            $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );

            // show content wrapper
            $( '#pageContentWrapper' ).fadeIn( 500 );

            // set resize event
            _setResizeEvent();

            // set resize event on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            _setResizeEvent();
		                	break;
	                }
	            } );
            }
        }
    };
    
    /**
     * @description Method to set the resizable elements.
     * @method _setResizableElements
     */
    function _setResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizableElements' );
        }

        // set left column resizable
        $( '#pageContentLeft' ).resizable({
            handles: 'e',
            minWidth: 200,
            maxWidth: 400,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentRight' ).outerWidth( $( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
                
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
        
        // set right column resizable
        $( '#pageContentRight' ).resizable({
            handles: 'w',
            minWidth: 400,
            maxWidth: 800,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentLeft' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );
                $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
                
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
    }
    
    /**
     * @description Method to reset the resizable elements.
     * @method _resetResizableElements
     */
    function _resetResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _resetResizableElements' );
        }

        $( '#pageContentLeft' ).css( 'width', '20%' );
        $( '#pageContentCenter, #pageContentRight' ).css( 'width', '40%' );
        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
        $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
        _setColumnWidth();
        _getSavedWidths();
    }

    /**
     * @description Method to set the column widths from session storage.
     * @method _setColumnWidth
     */
    function _setColumnWidth() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setColumnWidth' );
        }
            
        _columns.left = $( '#pageContentLeft' ).outerWidth();
        _columns.center = $( '#pageContentCenter' ).outerWidth();
        _columns.right = $( '#pageContentRight' ).outerWidth();
        _columns.handles.left = parseInt( $( '#pageContentLeft .ui-resizable-handle' ).css( 'left' ) );
        _columns.handles.right = parseInt( $( '#pageContentRight .ui-resizable-handle' ).css( 'right' ) );

        sessionStorage.setItem( 'columnWidths', JSON.stringify( _columns ) );
    }
    
    /**
     * @description Method to set the window rezise event.
     * @method _setResizeEvent
     */
    function _setResizeEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizeEvent' );
        }
            
        $( window ).off( 'resize orientationchange' ).on( 'resize orientationchange', function() {
            _resetResizableElements();

            if ( window.matchMedia( '(min-width: 769px)' ).matches ) {
                _setResizableElements();
            }
        } );
    }
    
    /**
     * @description Method to get the saved widths from session storage.
     * @method _getSavedWidths
     */
    function _getSavedWidths() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getSavedWidths' );
        }
            
        if ( sessionStorage.getItem( 'columnWidths' ) != undefined ) {
            _columns = JSON.parse( sessionStorage.getItem( 'columnWidths' ) );

            $( '#pageContentLeft' ).outerWidth( _columns.left );
            $( '#pageContentCenter' ).outerWidth( _columns.center );
            $( '#pageContentRight' ).outerWidth( _columns.right );
            $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
            $( '#pageContentRight .ui-resizable-handle' ).css( 'right', _columns.handles.right );
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.menu = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.menu.init' );
            }

            _setSubmenuToggleEvent();

            // set submenu toggle event on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            _setSubmenuToggleEvent();
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setSubmenuToggleEvent
     */
    function _setSubmenuToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setSubmenuToggleEvent' );
        }

        $( '[data-toggle="submenu"]' ).off( 'click' ).on( 'click', function ( event ) {
            if ( $( this ).next().is( ':visible' ) ) {
                $( '.submenu' ).hide();
                $( this ).next().hide();
            }
            else {
                $( '.submenu' ).hide();
                $( this ).next().show();
            }
        } );

        // reset all menus by clicking on body
        $( 'body' ).off( 'click' ).on( 'click', function( event ) {
            if ( 
                event.target.id == 'navigation' || 
                $( event.target ).closest( _defaults.navigationSelector ).length || 
                event.target.id == 'navigationActions' || 
                $( event.target ).closest( _defaults.navigationActionSelector ).length 
            ) {
                return;
            }
            else {
                $( '.submenu' ).hide();
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        selector: '.textarea-html'
    };
    
    goobiWorkflow.tinymce = {
        /**
         * @description Method to initialize tinyMCE.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.tinymce.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            var extendedTinyMceConfig = {
                selector: _defaults.selector,
                extended_valid_elements: 'p',
                statusbar: true,
                theme: 'modern',
                height: 200,
                menu: {},
                plugins: [
                    'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
                    'searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking',
                    'save table contextmenu directionality emoticons template paste'],
                content_css: 'css/content.css',
                toolbar: 'undo redo | styleselect | bold italic underline strikethrough | bullist numlist | image table | fullscreen code',
                spellchecker_languages: 'English=en_US,German=de_DE_frami',
                //	spellchecker_rpc_url: 'spellchecker.php',
                spellchecker_callback: function (method, text, success, failure) {
                    tinymce.util.JSONRequest.sendRPC({
                        url: "template/js/plugins/tinymce/js/tinymce/plugins/spellchecker/spellchecker.php",
                        method: "spellcheck",
                        params: {
                            lang: this.getLanguage(),
                            words: text.match(this.getWordCharPattern())
                        },
                        success: function (result) {
                            success(result);
                        },
                        error: function (error, xhr) {
                            console.log(error, xhr);
                            failure("Spellcheck error:" + xhr.status);
                        }
                    });
                },
                style_formats: [
                    {
                        title: 'Headings', items: [
                            { title: 'Heading 1', format: 'h1' },
                            { title: 'Heading 2', format: 'h2' },
                            { title: 'Heading 3', format: 'h3' },
                            { title: 'Heading 4', format: 'h4' },
                            { title: 'Heading 5', format: 'h5' },
                            { title: 'Heading 6', format: 'h6' }
                        ]
                    },
                    {
                        title: 'Blocks', items: [
                            { title: 'Paragraph', format: 'p' },
                            { title: 'Blockquote', format: 'blockquote' },
                            { title: 'Div', format: 'div' },
                        ]
                    },
                ],
                init_instance_callback: function (editor) {
                    var readOnlyAttr = $("#" + editor.id.replace(":", "\\:")).attr(
                        "readonly");
                    if (readOnlyAttr === "readonly") {
                        editor.setMode("readonly");
                    }
                    try {
                        resizeReferenceFields();
                        $(editor.getWin()).bind('resize', function () {
                            resizeReferenceFields();
                        });
                    } catch (error) {
                    }
                },
                setup: function (editor) {
                    editor.on("blur", function (event, a, b) {
                        editor.save();
                        console.log("input id = ", editor.id.replace(/:/g, "\\:"));
                        $("#" + editor.id.replace(/:/g, "\\:")).trigger("change");
                    });
                    editor.on('change', function () {
                        tinymce.triggerSave();
                    });
                }

            };

            function initTinyMce() {
                tinymce.init(extendedTinyMceConfig);
            }

            function renderInputFields(ajaxData) {
                if (typeof tinyMCE !== 'undefined') {
                    if (ajaxData === undefined || ajaxData.status == "begin") {
                        for (edId in tinyMCE.editors) {
                            try {
                                tinyMCE.editors[edId].remove();
                                console.log("Removed editor " + edId);
                            } catch (error) {
                                console.log("Error occured during removing editors; ", error);
                            }
                        }
                    }
                    if (ajaxData === undefined || ajaxData.status == "success") {
                        initTinyMce(ajaxData);
                    }
                }
            }

            $(window).on("load", function () {
                renderInputFields();
            });
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
//# sourceMappingURL=goobiWorkflowJS.min.js.map