var goobiWorkflowJS = ( function() {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    var goobiWorkflow = {
        currentView: ''
    };
    
    goobiWorkflow.init = function( config ) {
        if ( _debug ) {
            console.log( 'Initializing: goobiWorkflow.init' );
            console.log( '--> config = ', config );
        }
        
        $.extend( true, _defaults, config );

        // throw some console infos
        console.info( 'Current View: ', _defaults.currentView );

        // enable BS tooltips and BS popver
        $(function () {
            $( '[data-toggle="tooltip"]' ).tooltip();
            $( '[data-toggle="popover"]' ).popover({
                html: true
            });
        });

        // init menu
        goobiWorkflowJS.menu.init();

        // init layout
        goobiWorkflowJS.layout.init();
        
        // init module box
        goobiWorkflowJS.box.init();
        
        // init buttons
        goobiWorkflowJS.buttons.init();
        
        // TODO: init tinyMCE if needed
        // goobiWorkflowJS.tinymce.init(...);
        
        // init object view
        goobiWorkflowJS.object.init( _defaults );
        
        // init bookmarks
        goobiWorkflowJS.bookmarks.init();

        // init jump to page
        goobiWorkflowJS.jumpToPage.init();

        // listen to jsf ajax event
        if ( typeof jsf !== 'undefined' ) {
            jsf.ajax.addOnEvent( function ( data ) {
                var ajaxstatus = data.status;
                var ajaxloader = document.getElementById( 'imageLoader' );

                if ( _defaults.readOnlyMode === 'false' ) {
                    // var saveButton = document.getElementById( 'menu-form:saveMetsFileButton' );
                    // var saveMetsFileImage = document.getElementById( 'menu-form:saveMetsFileImage' );

                    // var ajaxSave = document.getElementById( 'menu-form:saveMetsFileButtonAjax' );
                    // var autoSave = document.getElementById( 'menu-form:automaticSave' );

                    // var exit = document.getElementById( 'exit' );
                    // var exitImage = document.getElementById( 'menu-form:exitImage' );

                    switch ( ajaxstatus ) {
                        case 'begin':
                            ajaxloader.style.display = 'block';
                            // saveButton.style.display = 'none';
                            // saveMetsFileImage.style.display = 'block';

                            // ajaxSave.disabled = true;
                            // autoSave.disabled = true;

                            // exit.style.display = 'none';
                            // exitImage.style.display = 'block';

                            if ( typeof renderInputFields == 'function' ) {
                                renderInputFields( data );
                            }
                            break;
                        case 'complete':
                            ajaxloader.style.display = 'none';
                            // saveButton.style.display = '';
                            // saveMetsFileImage.style.display = 'none';

                            // ajaxSave.disabled = false;
                            // autoSave.disabled = false;

                            // exit.style.display = 'block';
                            // exitImage.style.display = 'none';
                            break;
                        case 'success':
                            $( function () {
                                $( '[data-toggle="tooltip"]' ).tooltip();
                                $( '[data-toggle="popover"]' ).popover( {
                                    html: true
                                } );
                            });

                            if ( $( '.popover.fade.right.in' ).length > 0 ) {
                                $( '.popover.fade.right.in' ).remove();
                            }

                            // loadImages();
                            // loadThumbnails();
                            // addPaginationButtons();
                            // reloadAllHandler();
                            // fitResizeHandle();

                            if ( typeof renderInputFields == 'function' ) {
                                renderInputFields( data );
                            }
                            break;
                    }
                } 
                else {
                    switch ( ajaxstatus ) {
                        case "begin":
                            ajaxloader.style.display = 'block';
                            break;
                        case "complete":
                            ajaxloader.style.display = 'none';
                        case "success":
                            $( function () {
                                $( '[data-toggle="tooltip"]' ).tooltip();
                                $( '[data-toggle="popover"]' ).popover( {
                                    html: true
                                } );
                            });

                            if ( $('.popover.fade.right.in' ).length > 0 ) {
                                $( '.popover.fade.right.in' ).remove();
                            }

                    }
                }
            });
        }
    }

    /**
     * @description Method to print parts of the page.
     * @method printPage
     */
    goobiWorkflow.printPage = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflow.printPage');
        }

        var printReport = document.getElementById( 'left' ).innerHTML;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '#{HelperForm.servletPathWithHostAsUrl}/uii/template/css/intranda.css?version=1';

        var win = window.open("", "", "");
        var head = win.document.getElementsByTagName('head')[0];
        head.appendChild(link);
        win.document.body.innerHTML = printReport;

        win.window.print();
        win.close();
    }

    /**
     * @description Method to click the submit button on primefaces autocomplete.
     * @method submitEnter
     * @param {String} id The ID of the submit button.
     * @param {Event} e A JavaScript event which holds the key events.
     * */
    goobiWorkflow.submitEnter = function( id, e ) {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflow.submitEnter');
        }

        var keycode;

        if ( window.event ) {
            keycode = window.event.keyCode;
        }
        else if ( e ) {
            keycode = e.which;
        }
        else {
            return true;
        }
        if ( keycode == 13 ) {
            document.getElementById( id ).click();

            return false;
        }
        else {
            return true;
        }
    }

    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method setAutocompleteListHandler
     * */
    goobiWorkflow.setAutocompleteListHandler = function() {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflow.setAutocompleteListHandler');
        }

        setTimeout( function () {
            if ( $('.ui-autocomplete-panel li' ).length > 0 ) {
                $( '.ui-autocomplete-panel li' ).on( 'click', function () {
                    document.getElementById( 'goButton' ).click();
                });
            }
        }, 500 );
    }
    
    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method displayProgressBar
     * */
    goobiWorkflow.displayProgressBar = function() {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflow.displayProgressBar');
        }
        
        var element = document.getElementById( 'progressPanel' );

        if ( element.style.display == 'block' ) {
            element.style.display = 'none';
        } 
        else {
            element.style.display = 'block';
        }

        document.getElementById( 'progressbutton' ).click();
    }

    return goobiWorkflow;
    
} )( jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.bookmarks = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.bookmarks.init' );
            }

            // set dynamic to position of bookmarks
            _setTopPosition();
            
            $( window ).off( 'resize orientationchange' ).on( 'resize orientationchange', function() {
                _setTopPosition();                
            } );

            // load jquery plugin "colorbox"
            this.loadColorbox();
        },
        /**
         * @description Method to load a colorbox for bookmarks.
         * @method loadColorbox
         */
        loadColorbox: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflow.bookmarks.loadColorbox' );
            }

            // reset all colorboxes
            $.colorbox.remove();
            
            // set colorboxes
            $( '.colorbox-image' ).colorbox( {
                transition: 'fade',
                rel: 'colorbox-image',
                maxWidth: '90%',
                maxHeight: '90%',
            } );
        }
    };

    /**
     * @description Method to set the top position of the bookmarks.
     * @method _setTopPosition
     */
    function _setTopPosition() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setTopPosition' );
        }
        
        var controlWrapperHeight = $( '#objectControlWrapper' ).outerHeight();

        $( '#bookmarks' ).css( 'top', controlWrapperHeight + 90 );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _status = {};
    
    goobiWorkflow.box = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.box.init' );
            }

            // write box status to session storage
            if ( sessionStorage.getItem( 'boxStatus' ) == null ) {
                sessionStorage.setItem( 'boxStatus', JSON.stringify( _status ) );
            }

            // execute box methods
            _getBoxStatus();
            _setBoxStatus();
            _setToggleBoxBodyEvent();
            
            // execute box methods on ajax success
            if ( typeof jsf !== 'undefined' ) {
                jsf.ajax.addOnEvent( function( data ) {
                    var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
                        case "success":
                            _getBoxStatus();
                            _setBoxStatus();
                            _setToggleBoxBodyEvent();
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the status of the boxes.
     * @method _setBoxStatus
     */
    function _setBoxStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setBoxStatus' );
        }

        var status = JSON.parse( sessionStorage.getItem( 'boxStatus' ) );

        $( '.module__box--collapsable' ).each( function() {
            var currId = $( this ).attr( 'id' );
            var isClosed = $( this ).find( '[data-toggle="box-body"]' ).hasClass( 'closed' );

            if ( isClosed ) {
                status[ currId ] = false;
            }
            else {
                status[ currId ] = true;
            }
        } );

        sessionStorage.setItem( 'boxStatus', JSON.stringify( status ) );
    }
    
    /**
     * @description Method to get the status of the boxes.
     * @method _getBoxStatus
     */
    function _getBoxStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getBoxStatus' );
        }
        
        var status = JSON.parse( sessionStorage.getItem( 'boxStatus' ) );
        
        if ( status != null ) {
            $.each( status, function( element, status ) {
                if ( !status ) {
                    $( '#' + element ).find( '[data-toggle="box-body"]' ).addClass( 'closed' );
                    $( '#' + element ).find( '.module__box-body' ).hide();
                }
            } );
        }
    }

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setToggleBoxBodyEvent
     */
    function _setToggleBoxBodyEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setToggleBoxBodyEvent' );
        }

        $( '.module__box--collapsable .module__box-title h3' ).off( 'click' ).on( 'click', function () {
            $( this ).find( '[data-toggle="box-body"]' ).toggleClass( 'closed' );
            $( this ).parents( '.module__box-title' ).next().slideToggle( 200, function() {
                _setBoxStatus();
            } );
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.buttons = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.buttons.init' );
            }

            if ( $( '.btn' ).hasClass( 'btn--toggle' ) ) {
                _setButtonToggleEvent();
            }

            // add buttons to pagination select pages
            // TODO: 
            // - tooltips einbauen und message keys übergeben
            $( '#myCheckboxes label' ).each( function () {
                $( this ).append( 
                    '<button type="button" class="btn btn--icon" data-toggle="star-color"><i class="fa fa-star" aria-hidden="true"></i></i></button>' +
                    '<button type="button" class="btn btn--icon" data-select="image"><i class="fa fa-picture-o" aria-hidden="true"></i></button>'
                );
            });

            // set select page button events
            _setSelectImageButtonEvent();
            _setRepresentativeButtonEvent();

            // set button events on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            if ( $( '.btn' ).hasClass( 'btn--toggle' ) ) {
                                _setButtonToggleEvent();
                            }
                            _setSelectImageButtonEvent();
                            _setRepresentativeButtonEvent();
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the event listener to button toggle.
     * @method _setButtonToggleEvent
     */
    function _setButtonToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setButtonToggleEvent' );
        }

        $( '.btn--toggle' ).off( 'click' ).on( 'click', function () {
            $( this ).next( 'div' ).slideToggle( 300 );
        });
    }
    
    /**
     * @description Method to set the event listener for representative star.
     * @method _setRepresentativeButtonEvent
     */
    function _setRepresentativeButtonEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setRepresentativeButtonEvent' );
        }

        $( '[data-toggle="star-color"]' ).off( 'click' ).on( 'click', function () {
            $( '[data-toggle="star-color"]' ).each( function() {
                $( this ).removeClass( 'active' );
            } );

            if ( $( this ).hasClass( 'active' ) ) {
                $( this ).removeClass( 'active' );
            }
            else {
                $( this ).addClass( 'active' );
            }

            // TODO: 
            // - active state speichern
            // - commandButton klicken, um Bild zu setzen
        });
    }
    
    /**
     * @description Method to set the event listener to select image.
     * @method _setSelectImageButtonEvent
     */
    function _setSelectImageButtonEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setSelectImageButtonEvent' );
        }

        $( '[data-select="image"]' ).off( 'click' ).on( 'click', function () {
            var number = parseInt( $( this ).parent().attr( 'for' ).replace( 'myCheckboxes:', '' ) );
            
            $( '#jumpToImageAutocomplete_input' ).val( number + 1 );
            $( '#goButton' ).click();
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.jumpToPage = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.jumpToPage.init' );
            }
            
            $( '#jumpToPage span' ).off( 'click' ).on( 'click', function() {
                $( this ).hide();
                $( this ).next().show().focus();
            } );
            
            $( '#jumpToPage input[type="text"]' ).off( 'keypress blur' ).on( {
                keypress: function( event ) {
                    goobiWorkflowJS.submitEnter( 'jumpToPageAction', event );
                },
                blur: function() {
                    $( this ).hide();
                    $( this ).prev().show();
                },
            } );
        }
    };

    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _columns = {
        left: 0,
        center: 0,
        right: 0,
        handles: {
            left: 0,
            right: 0
        }
    }
    var _defaults = {};
    
    goobiWorkflow.layout = {
        /**
         * @description Method to initialize the layout module.
         * @method init
        */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.layout.init' );
            }

            // set resizable elements
            if ( window.matchMedia( '(min-width: 769px)' ).matches ) {
                _setResizableElements();
            }

            // get saved widths from session storage
            _getSavedWidths();

            // set initial position of toc actions
            $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );

            // show content wrapper
            $( '#pageContentWrapper' ).fadeIn( 500 );

            // set resize event
            _setResizeEvent();

            // set object view height
            _setObjectViewHeight();
            
            // set top margin for thumbnails
            _setThumbnailsMargin();
            
            // set resize event on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            _setResizeEvent();
                            _setObjectViewHeight();
		                	break;
	                }
	            } );
            }
        }
    };
    
    /**
     * @description Method to set the resizable elements.
     * @method _setResizableElements
     */
    function _setResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizableElements' );
        }

        // set left column resizable
        $( '#pageContentLeft' ).resizable({
            handles: 'e',
            minWidth: 200,
            maxWidth: 400,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentRight' ).outerWidth( $( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
                
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
        
        // set right column resizable
        $( '#pageContentRight' ).resizable({
            handles: 'w',
            minWidth: 400,
            maxWidth: 800,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentLeft' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );
                $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
                
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
    }
    
    /**
     * @description Method to reset the resizable elements.
     * @method _resetResizableElements
     */
    function _resetResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _resetResizableElements' );
        }

        $( '#pageContentLeft' ).css( 'width', '20%' );
        $( '#pageContentCenter, #pageContentRight' ).css( 'width', '40%' );
        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
        $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
        _setColumnWidth();
        _getSavedWidths();
    }

    /**
     * @description Method to set the column widths from session storage.
     * @method _setColumnWidth
     */
    function _setColumnWidth() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setColumnWidth' );
        }
            
        _columns.left = $( '#pageContentLeft' ).outerWidth();
        _columns.center = $( '#pageContentCenter' ).outerWidth();
        _columns.right = $( '#pageContentRight' ).outerWidth();
        _columns.handles.left = parseInt( $( '#pageContentLeft .ui-resizable-handle' ).css( 'left' ) );
        _columns.handles.right = parseInt( $( '#pageContentRight .ui-resizable-handle' ).css( 'right' ) );

        sessionStorage.setItem( 'columnWidths', JSON.stringify( _columns ) );
    }
    
    /**
     * @description Method to set the window rezise event.
     * @method _setResizeEvent
     */
    function _setResizeEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizeEvent' );
        }
            
        $( window ).off( 'resize orientationchange' ).on( 'resize orientationchange', function() {
            _resetResizableElements();
            _setObjectViewHeight();

            if ( window.matchMedia( '(min-width: 769px)' ).matches ) {
                _setResizableElements();
                _setObjectViewHeight();
            }
        } );
    }
    
    /**
     * @description Method to get the saved widths from session storage.
     * @method _getSavedWidths
     */
    function _getSavedWidths() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getSavedWidths' );
        }
            
        if ( sessionStorage.getItem( 'columnWidths' ) != undefined ) {
            _columns = JSON.parse( sessionStorage.getItem( 'columnWidths' ) );

            $( '#pageContentLeft' ).outerWidth( _columns.left );
            $( '#pageContentCenter' ).outerWidth( _columns.center );
            $( '#pageContentRight' ).outerWidth( _columns.right );
            $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
            $( '#pageContentRight .ui-resizable-handle' ).css( 'right', _columns.handles.right );
        }
    }
    
    /**
     * @description Method to set the correct height of the object view column.
     * @method _setObjectViewHeight
     */
    function _setObjectViewHeight() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setObjectViewHeight' );
        }
            
        var pageContentRightHeight = $( '#pageContentRight' ).outerHeight();
        var controlWrapperHeight = $( '#objectControlWrapper' ).outerHeight();
        
        $( '#mainImage' ).css( 'height', pageContentRightHeight - controlWrapperHeight - 45 );
    }
    
    /**
     * @description Method to set top margin of the thumbnail wrapper.
     * @method _setThumbnailsMargin
     */
    function _setThumbnailsMargin() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setThumbnailsMargin' );
        }
            
        var thumbnailsNavigationHeight = $( '#thumbnailsNavigation' ).height();
        
        $( '#thumbnails' ).css( 'margin-top', thumbnailsNavigationHeight + 10 );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.menu = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.menu.init' );
            }

            _setSubmenuToggleEvent();

            // set submenu toggle event on ajax success
            if ( typeof jsf !== 'undefined' ) {
	            jsf.ajax.addOnEvent( function( data ) {
	                var ajaxstatus = data.status;
	                
	                switch ( ajaxstatus ) {                        
		                case "success":
                            _setSubmenuToggleEvent();
		                	break;
	                }
	            } );
            }
        }
    };

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setSubmenuToggleEvent
     */
    function _setSubmenuToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setSubmenuToggleEvent' );
        }

        $( '[data-toggle="submenu"]' ).off( 'click' ).on( 'click', function ( event ) {
            if ( $( this ).next().is( ':visible' ) ) {
                $( '.submenu' ).hide();
                $( this ).next().hide();
            }
            else {
                $( '.submenu' ).hide();
                $( this ).next().show();
            }
        } );

        // reset all menus by clicking on body
        $( 'body' ).off( 'click' ).on( 'click', function( event ) {
            if ( 
                event.target.id == 'navigation' || 
                $( event.target ).closest( _defaults.navigationSelector ).length || 
                event.target.id == 'navigationActions' || 
                $( event.target ).closest( _defaults.navigationActionSelector ).length 
            ) {
                return;
            }
            else {
                $( '.submenu' ).hide();
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _viewImage = null;
    var _world = null;
    var _mediaType = null;
    var _configViewer = {
        global: {
            divId: "mainImage",
            useTiles: true,
            footerHeight: 0,
            adaptContainerHeight: false,
            zoomSlider: "#zoomSlider",
            zoomSliderHandle: ".zoomslider-handle",
            zoomSliderLabel: "#zoomSliderLabel input",
            persistZoom: false,
            persistRotation: false,
            persistenceId: '',
        },
        image: {
            mimeType: "image/jpeg",
            tileSource: '',
        }
    };
    var _worldConfig = {
        controls: {
            xAxis: {
                rotateLeft: "#rotate-left-x",
                rotateRight: "#rotate-right-x"
            },
            yAxis: {
                rotateLeft: "#rotate-left-y",
                rotateRight: "#rotate-right-y"
            },
            zAxis: {
                rotateLeft: "#rotate-left-z",
                rotateRight: "#rotate-right-z"
            },
            position: {
                reset: "#reset-position"
            },
            zoom: {
                resetZoom: "#reset#zoom"
            }
        },
        container: {
            id: "mainImage"
        },
    };
    
    goobiWorkflow.object = {
        /**
         * @description Method to initialize the object view.
         * @method init
         */
        init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.object.init' );
                console.log( '--> config = ', config );
            }
            
            $.extend( true, _defaults, config );

            // set configvariables
            _configViewer.global.persistenceId = _defaults.image.persistenceId;
            _configViewer.image.tileSource = _defaults.image.tileSource;

            
            // init object view
            if ( $( '#mainImage' ).length > 0 ) {
                this.imageLoadHandler();
            }
        },
        /**
         * @description Method to load the image handler.
         * @method imageLoadHandler
         */
        imageLoadHandler: function () {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflow.object.imageLoadHandler');
            }

            _mediaType = _defaults.image.mediaType;

            if ( _mediaType == "image" ) {
                _viewImage = new ImageView.Image(_configViewer);
                _viewImage.load().then( function ( image ) {
                    if (_configViewer.global.persistZoom || _configViewer.global.persistRotation) {
                        $("#imageFirst, #imageNext, #nextPage1, #afterNextPage, #imageLast").off("click", image.controls.persistence.storeLocation);
                        $("#imageFirst, #imageNext, #nextPage1, #afterNextPage, #imageLast").on("click", image.controls.persistence.storeLocation);
                    }
                }).catch( function ( error ) {
                    console.error("Error opening image", error);
                    $( "#" + _configViewer.global.divId ).html( 'Failed to load image: "' + error + '"' );
                });
            } 
            else if ( _mediaType == "object" ) {
                $( "#imageLoader" ).show();
                _world = WorldGenerator.create(_worldConfig);
                _world.loadObject( {
                    url: _defaults.image.objectUrl,
                    position: { x: 0, y: 0, z: 0 },
                    rotation: { x: 0, y: 0, z: 0 },
                    size: 10,
                    material: {
                        color: 0x44bb33
                    },
                    focus: true,
                    onTick: function ( object, time ) {
                        if ( object ) {
                            object.rotation.set( 0, Math.PI / 180 * time, 0 );
                        }
                    }
                }).then( function ( object ) {
                    $( "#imageLoader" ).fadeOut( 2000 );
                    console.info("loaded ", object);
                    _world.render();
                }).catch( function ( error ) {
                    $( "#imageLoader" ).fadeOut( 2000 );
                    console.error( "failed to load: ", error );
                })
            } 
            else if ( _mediaType == "x3dom" ) {
                var objectUrl = _defaults.image.objectUrl;
                $( "#imageLoader" ).show();
                new X3DLoader().load( $( "#mainImage" ), objectUrl, function () {
                    $( "#imageLoader" ).fadeOut( 2000 );
                    console.info( "loaded" );
                },
                function () {
                    console.info( "progress" );
                },
                function ( error ) {
                    $( "#imageLoader" ).fadeOut( 2000 );
                    console.info( "error", error );
                });
            }
        },
        /**
         * @description Method to clean up javascript resources for different object views.
         * @param {Object} data A data object.
         */
        freeJSResources: function( data ) {
            if ( !data || data.status == 'begin' ) {
                document.removeEventListener( 'globalDone', goobiWorkflowJS.object.imageLoadHandler() );

                if ( _viewImage ) {
                    console.info( 'closing OpenSeadragon viewe' );
                    _viewImage.close();
                }
                if ( _world ) {
                    console.info( 'disposing 3d scene' );
                    _world.dispose();
                }

                return;
            }
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        selector: '.textarea-html'
    };
    
    goobiWorkflow.tinymce = {
        /**
         * @description Method to initialize tinyMCE.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflow.tinymce.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            var extendedTinyMceConfig = {
                selector: _defaults.selector,
                extended_valid_elements: 'p',
                statusbar: true,
                theme: 'modern',
                height: 200,
                menu: {},
                plugins: [
                    'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
                    'searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking',
                    'save table contextmenu directionality emoticons template paste'],
                content_css: 'css/content.css',
                toolbar: 'undo redo | styleselect | bold italic underline strikethrough | bullist numlist | image table | fullscreen code',
                spellchecker_languages: 'English=en_US,German=de_DE_frami',
                //	spellchecker_rpc_url: 'spellchecker.php',
                spellchecker_callback: function (method, text, success, failure) {
                    tinymce.util.JSONRequest.sendRPC({
                        url: "template/js/plugins/tinymce/js/tinymce/plugins/spellchecker/spellchecker.php",
                        method: "spellcheck",
                        params: {
                            lang: this.getLanguage(),
                            words: text.match(this.getWordCharPattern())
                        },
                        success: function (result) {
                            success(result);
                        },
                        error: function (error, xhr) {
                            console.log(error, xhr);
                            failure("Spellcheck error:" + xhr.status);
                        }
                    });
                },
                style_formats: [
                    {
                        title: 'Headings', items: [
                            { title: 'Heading 1', format: 'h1' },
                            { title: 'Heading 2', format: 'h2' },
                            { title: 'Heading 3', format: 'h3' },
                            { title: 'Heading 4', format: 'h4' },
                            { title: 'Heading 5', format: 'h5' },
                            { title: 'Heading 6', format: 'h6' }
                        ]
                    },
                    {
                        title: 'Blocks', items: [
                            { title: 'Paragraph', format: 'p' },
                            { title: 'Blockquote', format: 'blockquote' },
                            { title: 'Div', format: 'div' },
                        ]
                    },
                ],
                init_instance_callback: function (editor) {
                    var readOnlyAttr = $("#" + editor.id.replace(":", "\\:")).attr(
                        "readonly");
                    if (readOnlyAttr === "readonly") {
                        editor.setMode("readonly");
                    }
                    try {
                        resizeReferenceFields();
                        $(editor.getWin()).bind('resize', function () {
                            resizeReferenceFields();
                        });
                    } catch (error) {
                    }
                },
                setup: function (editor) {
                    editor.on("blur", function (event, a, b) {
                        editor.save();
                        console.log("input id = ", editor.id.replace(/:/g, "\\:"));
                        $("#" + editor.id.replace(/:/g, "\\:")).trigger("change");
                    });
                    editor.on('change', function () {
                        tinymce.triggerSave();
                    });
                }

            };

            function initTinyMce() {
                tinymce.init(extendedTinyMceConfig);
            }

            function renderInputFields(ajaxData) {
                if (typeof tinyMCE !== 'undefined') {
                    if (ajaxData === undefined || ajaxData.status == "begin") {
                        for (edId in tinyMCE.editors) {
                            try {
                                tinyMCE.editors[edId].remove();
                                console.log("Removed editor " + edId);
                            } catch (error) {
                                console.log("Error occured during removing editors; ", error);
                            }
                        }
                    }
                    if (ajaxData === undefined || ajaxData.status == "success") {
                        initTinyMce(ajaxData);
                    }
                }
            }

            $(window).on("load", function () {
                renderInputFields();
            });
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
//# sourceMappingURL=goobiWorkflowJS.min.js.map