var goobiWorkflowJS = ( function() {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    var goobiWorkflow = {};
    
    goobiWorkflow.init = function( config ) {
        if ( _debug ) {
            console.log( 'Initializing: goobiWorkflowJS.init' );
            console.log( '--> config = ', config );
        }
        
        $.extend( true, _defaults, config );

        // throw some console infos
        console.info( 'Current View: ', _defaults.currentView );

        // init BS features --> needs ajax reload
        goobiWorkflowJS.initBootstrapFeatures();

        // init layout --> needs ajax reload
        goobiWorkflowJS.layout.init(_defaults);

        // init menu
        goobiWorkflowJS.menu.init();
        
        // init module box --> needs partial ajax reload
        goobiWorkflowJS.box.init();
        
        // init buttons --> needs ajax reload
        goobiWorkflowJS.buttons.init(_defaults);
        
        // TODO: init tinyMCE if needed
        // goobiWorkflowJS.tinymce.init(...);
        
        // init object view --> needs ajax reload
        goobiWorkflowJS.object.init();
        
        // init bookmarks --> needs ajax reload
        goobiWorkflowJS.bookmarks.init();

        // init jump to page
        goobiWorkflowJS.jumpToPage.init();

        // init scroll positions
        goobiWorkflowJS.scrollPositions.init();

        // init progressbar
        // goobiWorkflowJS..init();
        
        // init shortcuts for navigation
        goobiWorkflowJS.navigation.init(_defaults);
        
        // init buttons --> needs ajax reload
        goobiWorkflowJS.buttons.init(_defaults);
        
        // execute autosave interval
        if (_defaults.readOnlyMode === 'false') {
            goobiWorkflowJS.autoSave(_defaults.autoSaveInterval);
        }

        // init structdata module
        goobiWorkflowJS.structdata.init();
        
        // init modals
        goobiWorkflowJS.modals.init();
        
        // init thumbnails --> needs ajax reload
        goobiWorkflowJS.thumbnails.init();
        
        // init jsf ajax listener
        goobiWorkflowJS.jsfAjax.init( _defaults );
        

    }
    
    /**
     * @description Method to initialize Bootstrap features.
     * @method initBootstrapFeatures
     */
    goobiWorkflow.initBootstrapFeatures = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.initBootstrapFeatures');
        }
        
        $( '[data-toggle="tooltip"]' ).tooltip( {
            trigger: 'hover'
        } );
        $( '[data-toggle="popover"]' ).popover({
            html: true
        });
    }

    /**
     * @description Method to clean up Bootstrap features.
     * @method cleanUpBootstrapFeatures
     */
    goobiWorkflow.cleanUpBootstrapFeatures = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.cleanUpBootstrapFeatures');
        }

        if ( $( '.popover' ).length > 0 ) {
            $( '.popover' ).remove();
        }
        else if ( $( '.tooltip' ).length > 0 ) {
            $( '.tooltip' ).remove();
        }
    }

    /**
     * @description Method to print parts of the page.
     * @method printPage
     */
    goobiWorkflow.printPage = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.printPage');
        }

        var printReport = document.getElementById( 'left' ).innerHTML;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '#{HelperForm.servletPathWithHostAsUrl}/uii/template/css/intranda.css?version=1';

        var win = window.open("", "", "");
        var head = win.document.getElementsByTagName('head')[0];
        head.appendChild(link);
        win.document.body.innerHTML = printReport;

        win.window.print();
        win.close();
    }

    /**
     * @description Method to click the submit button on primefaces autocomplete.
     * @method submitEnter
     * @param {String} id The ID of the submit button.
     * @param {Event} e A JavaScript event which holds the key events.
     * */
    goobiWorkflow.submitEnter = function( id, e ) {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.submitEnter');
        }

        var keycode;

        if ( window.event ) {
            keycode = window.event.keyCode;
        }
        else if ( e ) {
            keycode = e.which;
        }
        else {
            return true;
        }
        if ( keycode == 13 ) {
            document.getElementById( id ).click();

            return false;
        }
        else {
            return true;
        }
    }

    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method setAutocompleteListHandler
     * */
    goobiWorkflow.setAutocompleteListHandler = function() {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.setAutocompleteListHandler');
        }

        setTimeout( function () {
            if ( $('.ui-autocomplete-panel li' ).length > 0 ) {
                $( '.ui-autocomplete-panel li' ).on( 'click', function () {
                    document.getElementById( 'goButton' ).click();
                });
            }
        }, 500 );
    }
    
    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method displayProgressBar
     * */
    goobiWorkflow.displayProgressBar = function() {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.displayProgressBar');
        }
        
        var element = document.getElementById( 'progressPanel' );

        if ( element.style.display == 'block' ) {
            element.style.display = 'none';
        } 
        else {
            element.style.display = 'block';
        }

        document.getElementById( 'progressbutton' ).click();
    }
    
    /**
     * @description Method to trigger autosave.
     * @method autoSave
     * @param {Number} interval The interval when autosave starts.
     * */
    goobiWorkflow.autoSave = function(interval) {            
        var intervalValue = parseInt(interval);
        
        if (intervalValue > 0) {
            setInterval( function() {
                var myButton = document.getElementById("meMenuActionsForm:automaticSave");
                if (myButton!=null) {
                    myButton.click();
                }
            }, intervalValue * 1000 * 60);
        }
    };
    
    /**
     * @description Method to trigger a button on enter.
     * @method fireOnEnter
     * @param {String} object The object selector to trigger enter.
     * @param {String} selector The selector of the button to click.
     * */
    goobiWorkflow.fireOnEnter = function (object, selector) {
        if (_debug) {
            console.log('EXECUTE: goobiWorkflowJS.fireOnEnter');
            console.log('--> object = ', object);
            console.log('--> selector = ', selector);
        }

        $('#' + object).on('keyup', function (event) {
            event.preventDefault();

            if (event.keyCode == 13) {
                $('#' + selector).click();
            }
        });
    };

    return goobiWorkflow;
    
} )( jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.bookmarks = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.bookmarks.init' );
            }

            // set dynamic to position of bookmarks
//            _setTopPosition();
            // set resize event
//            window.addEventListener( 'resize', _setTopPosition );
//            window.addEventListener( 'orientationchange', _setTopPosition );

            // load jquery plugin "colorbox"
            this.loadColorbox();
        },
        /**
         * @description Method to load a colorbox for bookmarks.
         * @method loadColorbox
         */
        loadColorbox: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.bookmarks.loadColorbox' );
            }

            // reset all colorboxes
            $.colorbox.remove();
            
            // set colorboxes
            $( '.colorbox-image' ).colorbox( {
                transition: 'fade',
                rel: 'colorbox-image',
                maxWidth: '90%',
                maxHeight: '90%',
            } );
        }
    };

    /**
     * @description Method to set the top position of the bookmarks.
     * @method _setTopPosition
     */
    function _setTopPosition() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setTopPosition' );
        }
        
        var controlWrapperHeight = $( '#objectControlWrapper' ).outerHeight();

        $( '#bookmarks' ).css( 'top', controlWrapperHeight + 90 );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _status = {};
    
    goobiWorkflow.box = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.box.init' );
            }

            // write box status to session storage
            if ( sessionStorage.getItem( 'boxStatus' ) == null ) {
                sessionStorage.setItem( 'boxStatus', JSON.stringify( _status ) );
            }

            // execute box methods
            this.getBoxStatus();
            _setBoxStatus();
            _setToggleBoxBodyEvent();
        },
        /**
         * @description Method to get the status of the boxes.
         * @method getBoxStatus
         */
        getBoxStatus: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.box.getBoxStatus' );
            }
            
            var status = JSON.parse( sessionStorage.getItem( 'boxStatus' ) );
            
            if ( status != null ) {
                $.each( status, function( element, status ) {
                    if ( !status ) {
                        $( '#' + element ).find( '[data-toggle="box-body"]' ).addClass( 'closed' );
                        $( '#' + element ).find( '.module__box-body' ).hide();
                    }
                } );
            }
        }
    };

    /**
     * @description Method to set the status of the boxes.
     * @method _setBoxStatus
     */
    function _setBoxStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setBoxStatus' );
        }

        var status = JSON.parse( sessionStorage.getItem( 'boxStatus' ) );

        $( '.module__box--collapsable' ).each( function() {
            var currId = $( this ).attr( 'id' );
            var isClosed = $( this ).find( '[data-toggle="box-body"]' ).hasClass( 'closed' );

            if ( isClosed ) {
                status[ currId ] = false;
            }
            else {
                status[ currId ] = true;
            }
        } );

        sessionStorage.setItem( 'boxStatus', JSON.stringify( status ) );
    }

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setToggleBoxBodyEvent
     */
    function _setToggleBoxBodyEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setToggleBoxBodyEvent' );
        }

        $( 'body' ).on( 'click', '.module__box--collapsable .module__box-title h3', function () {
            $( this ).find( '[data-toggle="box-body"]' ).toggleClass( 'closed' );
            $( this ).parents( '.module__box-title' ).next().slideToggle( 200, function() {
                _setBoxStatus();
            } );
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = (function (goobiWorkflow) {
    'use strict';

    var _debug = false;
    var _defaults = {};

    goobiWorkflow.buttons = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
        init: function (config) {
            if (_debug) {
                console.log('Initializing: goobiWorkflowJS.buttons.init');
            }
            
            $.extend( true, _defaults, config );
            
            if ($('.btn').hasClass('btn--toggle')) {
                _setButtonToggleEvent();
            }

            // add buttons to pagination select pages
            // TODO:
            // - tooltips einbauen und message keys übergeben
            if ($('#myCheckboxes label .btn--icon').length === 0) {
                $('#myCheckboxes label').each(function () {
                    $(this).append(
                        '<button type="button" title="' + _defaults.setRepresentativeImageText + '" class="btn btn--icon" data-toggle="star-color"><i class="fa fa-star" aria-hidden="true"></i></i></button>' +
                        '<button type="button" title="' + _defaults.openImageTitleText + '" class="btn btn--icon" data-select="image"><i class="fa fa-picture-o" aria-hidden="true"></i></button>'
                    );
                });
                // active star of representative image 
                var currentRepresentative =  $('#hiddenRepresentative').val();
                var imageCheckbox = $('#myCheckboxes\\:' + currentRepresentative).next();
                var star = imageCheckbox.find('button:nth-child(1)');
                star.addClass('active');
            }

            // set select page button events
            _setSelectImageButtonEvent();
            _setRepresentativeButtonEvent();
        }
    };

    /**
     * @description Method to set the event listener to button toggle.
     * @method _setButtonToggleEvent
     */
    function _setButtonToggleEvent() {
        if (_debug) {
            console.log('EXECUTE: _setButtonToggleEvent');
        }

        $('.btn--toggle').off().on('click', function () {
            $(this).next('div').slideToggle(300);
        });
    }

    /**
     * @description Method to set the event listener for representative star.
     * @method _setRepresentativeButtonEvent
     */
    function _setRepresentativeButtonEvent() {
        if (_debug) {
            console.log('EXECUTE: _setRepresentativeButtonEvent');
        }

        $('[data-toggle="star-color"]').off().on('click', function () {
            $('[data-toggle="star-color"]').each(function () {
                $(this).removeClass('active');
            });

            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
            }
            else {
                $(this).addClass('active');
            }    
            var number = parseInt($(this).parent().attr('for').replace('myCheckboxes:', ''));
            $('#hiddenRepresentative').val(number + 1);
             $('#useRepresentative').click();   
            
        });
                    
         
    }

    /**
     * @description Method to set the event listener to select image.
     * @method _setSelectImageButtonEvent
     */
    function _setSelectImageButtonEvent() {
        if (_debug) {
            console.log('EXECUTE: _setSelectImageButtonEvent');
        }

        $('[data-select="image"]').off('click').on('click', function () {
            var number = parseInt($(this).parent().attr('for').replace('myCheckboxes:', ''));

            $('#jumpToImageAutocomplete_input').val(number + 1);
            $('#goButton').click();
        });
    }
                
    return goobiWorkflow;

})(goobiWorkflowJS || {}, jQuery);
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.jsfAjax = {
        /**
         * @description Method to initialize the jsf ajax listener.
         * @method init
         */
    	init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.jsfAjax.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            // listen to jsf ajax event
            if (typeof jsf !== 'undefined') {
                jsf.ajax.addOnEvent(function (data) {
                    if (_debug) {
                        console.log('JSF AJAX - data: ', data);
                    }
                    var ajaxloader = document.getElementById("ajaxloader");
                    
                    switch (data.status) {
                        case 'begin':
                            // show button ajax loader
                            if ($('.btn').hasClass('btn--loader')) {
                                $('.btn-ajax-loader').addClass('in');
                            }
                            ajaxloader.style.display = 'block';
                            // clean up object resources
                            goobiWorkflowJS.object.freeJSResources();
                            break;
                        case 'complete':
                            ajaxloader.style.display = 'none';
                            break;
                        case 'success':
                            // hide button ajax loader
                            if ($('.btn').hasClass('btn--loader')) {
                                $('.btn-ajax-loader').removeClass('in');
                            }
                            // init BS features
                            goobiWorkflowJS.cleanUpBootstrapFeatures();
                            goobiWorkflowJS.initBootstrapFeatures();
                            // init layout
                            goobiWorkflowJS.layout.init();
                            // init object view
                            goobiWorkflowJS.object.imageLoadHandler();
                            // get box status
                            goobiWorkflowJS.box.getBoxStatus();
                            // init buttons
                            goobiWorkflowJS.buttons.init();
                            // init bookmarks
                            goobiWorkflowJS.bookmarks.init();
                            // init thumbnails
                            goobiWorkflowJS.thumbnails.init();
                            break;
                    }
                });
            }
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.jumpToPage = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.jumpToPage.init' );
            }
            
            $( 'body' ).on( 'click', '#jumpToPage span', function() {
                $( this ).hide();
                $( this ).next().show().focus();
            } );
            $( 'body' ).on( 'keypress', '#jumpToPage input[type="text"]', function( event ) {
                goobiWorkflowJS.submitEnter( 'jumpToPageAction', event );
            } );
            $( 'body' ).on( 'blur', '#jumpToPage input[type="text"]', function() {
                $( this ).hide();
                $( this ).prev().show();
            } );            
        }
    };

    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _columns = {
        left: 0,
        center: 0,
        right: 0,
        handles: {
            left: 0,
            right: 0
        }
    }
    var _defaults = {};
    
    goobiWorkflow.layout = {
        /**
         * @description Method to initialize the layout module.
         * @method init
        */
    	init: function(config) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.layout.init' );
            }
            $.extend( true, _defaults, config );

            if ( window.matchMedia( '(min-width: 993px)' ).matches ) {
                // set resize event
                window.addEventListener( 'resize', _setResizeEvents );
                window.addEventListener( 'orientationchange', _setResizeEvents );

                // set resizable elements
                _setResizableElements();

                // get saved widths from session storage
                _getSavedWidths();
            }

            // set flexible row columns            
            _setFlexibleRowColumns();
            // set initial position of toc actions
            $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
            // set top margin for thumbnails
            _setThumbnailsMargin();
            // show content wrapper
            $( '#pageContentWrapper' ).show();
//            setTimeout(function() {
//            }, 500);
        },
        /**
         * @description Method to set the correct height of the object view column.
         * @method setObjectViewHeight
         */
        setObjectViewHeight: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.layout.setObjectViewHeight' );
            }
                        
            var pageContentRightHeight = $( '#pageContentRight' ).outerHeight();
            var controlWrapperHeight = $( '#imageNavigation' ).outerHeight();
            $( '#mainImage' ).css( 'height', pageContentRightHeight - controlWrapperHeight - 45 );
            
        }
    };
    
    /**
     * @description Method to set the resizable elements.
     * @method _setResizableElements
     */
    function _setResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizableElements' );
        }

        // set left column resizable
        $( '#pageContentLeft' ).resizable({
            handles: 'e',
            minWidth: 200,
            maxWidth: $(window).width() * 0.45,
            resize: function( event, ui ) {
            if (_defaults.displayImageArea) {
//                if ($( window ).outerWidth() < $( '#pageContentRight' ).outerWidth() + $( '#pageContentLeft' ).outerWidth() + $( '#pageContentCenter' ).outerWidth() )
//                    {
//                        $( '#pageContentCenter' ).outerWidth( ($( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth()) / 2 );
//                        $( '#pageContentRight' ).outerWidth( ($( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth()) / 2 );
//                    } else {                        
                        $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
//                        $( '#pageContentRight' ).outerWidth( $( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );                    
                        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
//                    }
            } else {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
            }
                goobiWorkflowJS.layout.setObjectViewHeight();
                _setFlexibleRowColumns();
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
       // if (_defaults.displayImageArea) {
            // set right column resizable
        $( '#pageContentRight' ).resizable({
            handles: 'w',
            minWidth: 400,
            maxWidth: $(window).width() / 2,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                //$( '#pageContentLeft' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentCenter' ).outerWidth() );
                $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
                
                goobiWorkflowJS.layout.setObjectViewHeight();
                _setFlexibleRowColumns();
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
    }
    
    /**
     * @description Method to reset the resizable elements.
     * @method _resetResizableElements
     */
    function _resetResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _resetResizableElements' );
        }

        $( '#pageContentLeft' ).css( 'width', '20%' );
        if (_defaults.displayImageArea) {

        $( '#pageContentCenter, #pageContentRight' ).css( 'width', '40%' );
        } else {
            $( '#pageContentCenter').css( 'width', '80%' );
        }
        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
        $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
        _setColumnWidth();
        _getSavedWidths();
    }

    /**
     * @description Method to set the column widths from session storage.
     * @method _setColumnWidth
     */
    function _setColumnWidth() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setColumnWidth' );
        }
            
        _columns.left = $( '#pageContentLeft' ).outerWidth();
        _columns.center = $( '#pageContentCenter' ).outerWidth();
        _columns.right = $( '#pageContentRight' ).outerWidth();
        _columns.handles.left = parseInt( $( '#pageContentLeft .ui-resizable-handle' ).css( 'left' ) );
        _columns.handles.right = parseInt( $( '#pageContentRight .ui-resizable-handle' ).css( 'right' ) );

        sessionStorage.setItem( 'columnWidths', JSON.stringify( _columns ) );
    }
    
    /**
     * @description Method to set the window rezise event.
     * @method _setResizeEvents
     */
    function _setResizeEvents() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizeEvents' );
        }

        _resetResizableElements();
        goobiWorkflowJS.layout.setObjectViewHeight();
        _setFlexibleRowColumns();
    }
    
    /**
     * @description Method to get the saved widths from session storage.
     * @method _getSavedWidths
     */
    function _getSavedWidths() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getSavedWidths');
        }
            
        if ( sessionStorage.getItem( 'columnWidths' ) != undefined ) {
            _columns = JSON.parse( sessionStorage.getItem( 'columnWidths' ) );
        if (_defaults.displayImageArea) {
            if ($( window ).outerWidth() < _columns.left +  _columns.center + _columns.right || _columns.right == null) {
                $( '#pageContentLeft' ).outerWidth( _columns.left );
                $( '#pageContentCenter' ).outerWidth(($(window).width() -  $( '#pageContentLeft' ).outerWidth())/2 );
                $( '#pageContentRight' ).outerWidth( ($(window).width() -  $( '#pageContentLeft' ).outerWidth() ) /2);
            } else {
                $( '#pageContentLeft' ).outerWidth( _columns.left );
                $( '#pageContentCenter' ).outerWidth( _columns.center );
                $( '#pageContentRight' ).outerWidth( _columns.right );
            }
            $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
            $( '#pageContentRight .ui-resizable-handle' ).css( 'right', _columns.handles.right );                
        } else {
            $( '#pageContentLeft' ).outerWidth( _columns.left );
            $( '#pageContentCenter' ).outerWidth($(window).width() -  $( '#pageContentLeft' ).outerWidth() );
            $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
        }
        }
    }
    
    /**
     * @description Method to set top margin of the thumbnail wrapper.
     * @method _setThumbnailsMargin
     */
    function _setThumbnailsMargin() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setThumbnailsMargin' );
        }
            
//        var thumbnailsNavigationHeight = $( '#thumbnailsNavigation' ).height();
//        
//        if (window.matchMedia('(min-width: 993px)').matches) {
//            $( '#thumbnails' ).css( 'margin-top', thumbnailsNavigationHeight + 10 );
//        }
//        else {
//            $( '#thumbnails' ).css( 'margin-top', 66 );
//        }
    }
    
    /**
     * @description Method to set the flexible row column width.
     * @method _setFlexibleRowColumns
     */
    function _setFlexibleRowColumns() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setFlexibleRowColumns' );
        }
     
        if ($( '.row-flexible' ).width() > 0 && $( '.row-flexible' ).width() < 550 ) {
            
            $( '.row-flexible' ).addClass( 'fullwidth' );
        }
        else {
            $( '.row-flexible' ).removeClass( 'fullwidth' );
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.menu = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.menu.init' );
            }

            _setSubmenuToggleEvent();

            // toggle mobile navigation
            $('body').on('click', '[data-toggle="mobile-menu"]', function () {
                $('#navigation').slideToggle(200);
            });
            // toggle mobile image
            $('body').on('click', '[data-toggle="mobile-image"]', function () {
                $(this).toggleClass('in');
                $('#pageContentRight').toggleClass('in');
            });
        }
    };

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setSubmenuToggleEvent
     */
    function _setSubmenuToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setSubmenuToggleEvent' );
        }

        $( 'body' ).on( 'click', '[data-show="submenu"]', function ( event ) {            
            if ( $( this ).next().is( ':visible' ) ) {
                $( '.submenu' ).hide();
                $( this ).next().hide();
            }
            else {
                $( '.submenu' ).hide();
                $( this ).next().show();
            }
        } );

        // reset all menus by clicking on body
        $( 'body' ).on( 'click', function( event ) {
            if ( 
                event.target.id == 'navigation' || 
                $( event.target ).closest( _defaults.navigationSelector ).length || 
                event.target.id == 'navigationActions' || 
                $( event.target ).closest( _defaults.navigationActionSelector ).length 
            ) {
                return;
            }
            else {
                $( '.submenu' ).hide();
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.modals = {
        /**
         * @description Method to initialize the modals module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.modals.init' );
            }
            
            // geonames modal
            $('body').on('click', 'a[id*="geonamesIndexTrigger-"]', function () {
                var currIndex = $(this).attr('data-row');
                var currType = $(this).attr('data-datatype');
                $('#rowIndex').val(currIndex);
                $('#rowType').val(currType);
                $('#updatePluginButton').click();
            });

            // gnd modal
            $('body').on('click', 'a[id*="gndIndexTrigger-"]', function () {
                var currIndex = $(this).attr('data-row');
                var currType = $(this).attr('data-datatype');
                $('#rowIndex').val(currIndex);
                $('#rowType').val(currType);
                $('#updatePluginButton').click();
            });

            // person modal
            $('body').on('click', 'a[id*="gndPersonIndexTrigger-"]', function () {
                console.log('click');
                var currIndex = $(this).attr('data-row');
                var currType = $(this).attr('data-datatype');
                $('#rowIndex').val(currIndex);
                $('#rowType').val(currType);
                $('#updatePluginButton').click();
            });
            
            // dante modal
            $( 'body' ).on( 'click', 'a[id*="danteIndexTrigger-"]', function() {
                var currIndex = $( this ).attr( 'data-row' );
                var currType = $( this ).attr( 'data-datatype' );
                var currGroup = $( this ).attr( 'data-groupindex')
                $( '#rowIndex' ).val( currIndex );
                $( '#groupIndex' ).val( currGroup );
                $( '#rowType' ).val( currType );                
                $('#resultList').empty();
                $('#danteInput').val('');
                $('#updatePluginButton').click();
            } );
            
            // processbar modal
            $( 'body' ).on( 'click', 'a[id*="processIndexTrigger-"]', function() {
                var currIndex = $( this ).attr( 'data-row' );
                var currType = $( this ).attr( 'data-datatype' );
                var currGroup = $( this ).attr( 'data-groupindex')
                $( '#rowIndex' ).val( currIndex );
                $( '#groupIndex' ).val( currGroup );
                $( '#rowType' ).val( currType );
                $('#updatePluginButton').click();
            } );
            
            // viaf modal
            $( 'body' ).on( 'click', 'a[id*="viafIndexTrigger-"]', function() {
                var currIndex = $( this ).attr( 'data-row' );
                var currType = $( this ).attr( 'data-datatype' );
                var currGroup = $( this ).attr( 'data-groupindex');
                $( '#rowIndex' ).val( currIndex );
                $( '#groupIndex' ).val( currGroup );
                $( '#rowType' ).val( currType );
                $('#updatePluginButton').click()
            } );

            $( 'body' ).on( 'click', 'a[id*="viafPersonIndexTrigger-"]', function() {
                var currIndex = $( this ).attr( 'data-row' );
                var currType =  'viafperson';
                var currGroup = $( this ).attr( 'data-groupindex');
                $( '#rowIndex' ).val( currIndex );
                $( '#groupIndex' ).val( currGroup );
                $( '#rowType' ).val( currType );
                $('#updatePluginButton').click()
            } );
        },
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.navigation = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
        init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.navigation.init' );
            }
            
            $.extend( true, _defaults, config );
            
            _setImageNavigationButtonEvents();
        }
    };
    
    function _setImageNavigationButtonEvents() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setImageNavigationButtonEvents' );
        }
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+right', function() {
            var myButton = document.getElementById( "nextImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+left', function() {
            var myButton = document.getElementById( "prevImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+up', function() {
            var myButton = document.getElementById( "imageNext20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+down', function() {
            var myButton = document.getElementById( "imageBack20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+home', function() {
            var myButton = document.getElementById( "imageFirst" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+end', function() {
            var myButton = document.getElementById( "imageLast" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+return', function() {
            var myButton = document.getElementById( "meMenuActionsForm:saveMetsFileButtonAjax" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+space', function() {
            var hiddenImageNo = $( "#hiddenImageNo" ).val();
            if ( hiddenImageNo == null ) {
                hiddenImageNo = $( "#hiddenImageNoThumb" ).val();
            }
            
            console.log( document.getElementsByName( "myCheckboxes" ).length );
            
            for ( i = 0; i < document.getElementsByName( "myCheckboxes" ).length; i++ ) {
                if ( i == hiddenImageNo ) {
                    var checkbox = document.getElementsByName( "myCheckboxes" )[ i ];
                    if ( checkbox.checked ) {
                        checkbox.checked = false;
                    }
                    else {
                        checkbox.checked = true;
                    }
                    checkbox.focus();
                    checkbox.blur();
                }
            }
        } )

        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+right', function() {
            var myButton = document.getElementById( "nextImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+left', function() {
            var myButton = document.getElementById( "prevImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+up', function() {
            var myButton = document.getElementById( "imageNext20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+down', function() {
            var myButton = document.getElementById( "imageBack20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+home', function() {
            var myButton = document.getElementById( "imageFirst" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+end', function() {
            var myButton = document.getElementById( "imageLast" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+return', function() {
            
            var myButton = document.getElementById( "meMenuActionsForm:saveMetsFileButtonAjax" );
            console.log( myButton );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+space', function() {
            var hiddenImageNo = $( "#hiddenImageNo" ).val();
            for ( i = 0; i < document.getElementsByName( "myCheckboxes" ).length; i++ ) {
                if ( i == hiddenImageNo ) {
                    var checkbox = document.getElementsByName( "myCheckboxes" )[ i ];
                    if ( checkbox.checked ) {
                        checkbox.checked = false;
                    }
                    else {
                        checkbox.checked = true;
                    }
                }
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );

var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _viewImage = null;
    var _world = null;
    var _mediaType = null;
    var _configViewer = {
        global: {
            divId: "mainImage",
            useTiles: true,
            footerHeight: 0,
            adaptContainerHeight: false,
            zoomSlider: ".zoom-slider",
            zoomSliderHandle: ".zoom-slider-handle",
            zoomSliderLabel: "#zoomSliderLabel input",
            persistZoom: false,
            persistRotation: false,
            persistenceId: '',
        },
        image: {
            mimeType: "image/jpeg",
            tileSource: '',
        }
    };
    var _worldConfig = {
        controls: {
            xAxis: {
                rotateLeft: "#rotate-left-x",
                rotateRight: "#rotate-right-x"
            },
            yAxis: {
                rotateLeft: "#rotate-left-y",
                rotateRight: "#rotate-right-y"
            },
            zAxis: {
                rotateLeft: "#rotate-left-z",
                rotateRight: "#rotate-right-z"
            },
            position: {
                reset: "#reset-position"
            },
            zoom: {
                resetZoom: "#reset#zoom"
            }
        },
        container: {
            id: "mainImage"
        },
    };
    
    goobiWorkflow.object = {
        /**
         * @description Method to initialize the object view.
         * @method init
         */
        init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.object.init' );
            }

            // TODO: fix image controls
            
            // init object view
            if ( $( '#mainImage' ).length > 0 ) {
                this.imageLoadHandler();

                // if ( _configViewer.global.persistZoom || _configViewer.global.persistRotation ) {
                //     $( 'body' ).on( 'click', '#imageNavigation a', function() {
                //         if ( _viewImage ) {
                //             console.log('click');
                //             _viewImage.controls.persistence.storeLocation
                //         }
                //     } );
                // }
            }
        },
        initControls() {
            $('#rotate-right-x').on("click", function() {
                _viewImage.controls.rotateRight();
            })
            $('#rotate-left-x').on("click", function() {
                _viewImage.controls.rotateLeft();
            })
            $('#reset-position').on("click", function() {
                _viewImage.controls.reset(true);
            })

       

        },
        /**
         * @description Method to load the image handler.
         * @method imageLoadHandler
         */
        imageLoadHandler: function () {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.object.imageLoadHandler');
            }

            _mediaType = $( '#mediaType' ).val();
            
            if ( _mediaType == 'image' ) {
                _configViewer.global.persistenceId = $( '#persistenceId' ).val();
                _configViewer.image.tileSource = $( '#tileSource' ).val();
                _viewImage = new ImageView.Image(_configViewer);
                _viewImage.load().then( function () {
                    goobiWorkflowJS.layout.setObjectViewHeight();
                    goobiWorkflow.object.initControls();
                    
                    
                }).catch( function ( error ) {
                    console.error( 'imageLoadHandler: Error opening image', error );

                    $( '#' + _configViewer.global.divId ).html( 'Failed to load image: ' + error );
                });
            } 
            else if ( _mediaType == 'object' ) {
                $( '#imageLoader' ).show();
                goobiWorkflowJS.layout.setObjectViewHeight();
                _world = WorldGenerator.create(_worldConfig);
                _world.loadObject( {
                    url: $( '#objectUrl' ).val(),
                    position: { x: 0, y: 0, z: 0 },
                    rotation: { x: 0, y: 0, z: 0 },
                    size: 10,
                    material: {
                        color: 0x44bb33
                    },
                    focus: true,
//                    onTick: function ( object, time ) {
//                        if ( object ) {
//                            object.rotation.set( 0, Math.PI / 180 * time, 0 );
//                        }
//                    }
                }).then( function ( object ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: loaded', object );
                    _world.render();
                }).catch( function ( error ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.error( 'imageLoadHandler: failed to load: ', error );
                })
            } 
            else if ( _mediaType == 'x3dom' ) {
                var objectUrl = $( '#objectUrl' ).val();
                $( '#imageLoader' ).show();
                new X3DLoader().load( $( '#mainImage' ), objectUrl, function () {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: loaded' );
                },
                function () {
                    console.info( 'imageLoadHandler: progress' );
                },
                function ( error ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: error', error );
                });
            }
        },
        /**
         * @description Method to clean up javascript resources for different object views.
         * @param {Object} data A data object.
         */
        freeJSResources: function( data ) {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.object.freeJSResources');
            }

            if ( !data || data.status == 'begin' ) {
                document.removeEventListener( 'globalDone', goobiWorkflowJS.object.imageLoadHandler() );

                if ( _viewImage ) {
                    console.info( 'freeJSResources: closing OpenSeadragon viewer' );
                    _viewImage.close();
                }
                if ( _world ) {
                    console.info( 'freeJSResources: disposing 3d scene' );
                    _world.dispose();
                }

                return;
            }
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.printpage = {
        /**
         * @description Method to initialize a print stylesheet.
         * @method init
         */
    	init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.printpage.init' );
            }
        },
        /**
         * @description Method to open the structure tree in a new window for print.
         * @method print
         */
        print: function(url) {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.printpage.print');
                console.log( '--> url = ', url );
            }
            
            var printReport = document.getElementById('pageContentLeft').innerHTML;
            var link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = url + '/uii/template/css/intranda.css?version=1';
            
            var win = window.open("", "", "");
            var head = win.document.getElementsByTagName('head')[0];
            head.appendChild(link);
            win.document.body.innerHTML = printReport;
            
            win.window.print();
            win.close();
        }
    };
    

    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = (function (goobiWorkflow) {
    'use strict';

    var _debug = true;

    goobiWorkflow.progress = {
        /**
         * @description Method to initialize the progress bar module.
         * @method init
         */
        init: function (config) {
            if (_debug) {
                console.log('Initializing: goobiWorkflowJS.progress.init');
            }
        },
        /**
         * @description Method to show the progressbar panel.
         * @method displayProgressBar
         */
        displayProgressBar: function () {
            if (_debug) {
                console.log('EXECUTE: goobiWorkflowJS.progress.displayProgressBar');
            }
            
            var element = document.getElementById('progressPanel');

            if (element.style.display == 'block') {
                element.style.display = 'none';
            } 
            else {
                element.style.display = 'block';
            }
            
            document.getElementById('progressbutton').click();
        },
    };

    return goobiWorkflow;

})(goobiWorkflowJS || {}, jQuery);
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _positions = {
        selectPage: {
            label: 0
        },
        structure: {
            link: 0
        }
    };
    
    goobiWorkflow.scrollPositions = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.scrollPositions.init' );
            }

            // get scroll status
            _getScrollStatus();

            // set scroll status
            _setScrollStatus();
        }
    };

    /**
     * @description Method to set the scroll status of the boxes.
     * @method _setScrollStatus
     */
    function _setScrollStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setScrollStatus' );
        }

        // set scroll status of structure link
        $( 'body' ).on( 'click', '#meStructure a', function() {
            _positions.structure.link = $( this ).parents('tr').position().top;

            sessionStorage.setItem( 'scrollPositions', JSON.stringify( _positions ) );
        } );
    }

    /**
     * @description Method to get the scroll status of the boxes.
     * @method _getScrollStatus
     */
    function _getScrollStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getScrollStatus' );
        }

        var structLinkPosition;
        
        if ( sessionStorage.getItem( 'scrollPositions' ) == null ) {
            sessionStorage.setItem( 'scrollPositions', JSON.stringify( _positions ) );
            structLinkPosition = JSON.parse( sessionStorage.getItem( 'scrollPositions' ) );
            $( '#pageContentLeft' ).scrollTop( structLinkPosition.structure.link );
        }
        else {
            structLinkPosition = JSON.parse( sessionStorage.getItem( 'scrollPositions' ) );
            $( '#pageContentLeft' ).scrollTop( structLinkPosition.structure.link );
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _tabStatusDefault = {
        metseditorPagesOverview: true,
        metseditorPagesAllPages: false,
        metseditorPagesQuickassign: false
    };
    var _tabStatus = {};
    
    goobiWorkflow.structdata = {
        /**
         * @description Method to initialize the structdata module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.structdata.init' );
            }

            // check session storage for tab status
            if (sessionStorage.getItem('structdataTabStatus') == null || sessionStorage.getItem('structdataTabStatus') == undefined) {
                _tabStatus = sessionStorage.setItem('structdataTabStatus', JSON.stringify(_tabStatusDefault));

                // check page assignment tab status
                _getPageAssignmentTabStatus();
                _setPageAssignmentTabStatus();
            }
            else {
                _tabStatus = sessionStorage.getItem('structdataTabStatus');
                
                // check page assignment tab status
                _getPageAssignmentTabStatus();
                _setPageAssignmentTabStatus();
            }
        },
    };

    /**
     * @description Method to check and get the page assignment tab status.
     * @method _getPageAssignmentTabStatus
     */
    function _getPageAssignmentTabStatus() {
        if (_debug) {
            console.log('EXECUTE: _getPageAssignmentTabStatus');
        }

        var status = JSON.parse(_tabStatus);
        
        $.each(status, function(index, value) {
            if (value) {
                $('#' + index).addClass('show');
            }
        });
    }

    /**
     * @description Method to check and set the page assignment tab status.
     * @method _setPageAssignmentTabStatus
     */
    function _setPageAssignmentTabStatus() {
        if (_debug) {
            console.log('EXECUTE: _setPageAssignmentTabStatus');
        }

        var status = JSON.parse(_tabStatus);
        
        $('body').on('click', '[data-target="#metseditorPagesOverview"], [data-target="#metseditorPagesAllPages"], [data-target="#metseditorPagesQuickassign"]', function() {
            var currentTarget = $(this).attr('aria-controls');
            
            $.each(status, function (index) {
                if (index == currentTarget) {
                    status[index] = true;
                }
                else {
                    status[index] = false;
                }
                sessionStorage.setItem('structdataTabStatus', JSON.stringify(status));
            });
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _intrandaImages = {};
    
    goobiWorkflow.thumbnails = {
        /**
         * @description Method to initialize the thumbnail rendering.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.thumbnails.init' );
            }

            $( '.thumbnails__thumb-canvas' ).each( function( index, el ) {
                drawOnCanvas( el );
            } );
        },
    };
    
    /**
     * @description Method to set the active thumbnail when it gets selected
     */

    
    goobiWorkflow.updateSelectedThumbnail = function( element ) {
        var galleryLinks;
        galleryLinks = document.getElementsByClassName('thumbnails__thumb-image');
        for (var i = 0; i < galleryLinks.length; i++) {
            galleryLinks[i].className = "thumbnails__thumb-image";            
        }
        element.parentElement.parentElement.className = "thumbnails__thumb-image img-active";
        return true;
    }
    
    /**
     * @description Method to draw the thumbnail images on a canvas.
     * @method drawOnCanvas
     * @param {Object} canvas The canvas object to draw on.
     */
    function drawOnCanvas( canvas ) {
        setTimeout( function() {
            
            if ( canvas == null ) {
                return;
            }
            var ctx = canvas.getContext( '2d' );
            var d = canvas.dataset;
            
            if ( !d ) {
                // fix for ie not supporting element.dataset
                d = {};
                d.image_small = canvas.getAttribute( 'data-image_small' );
                d.image_large = canvas.getAttribute( 'data-image_large' );
            }
            
            var img = new Image();
            img.onload = function() {
                var scale = ( canvas.width * 2 ) / this.width;
                canvas.width = this.width;
                canvas.height = this.height;
                ctx.drawImage( img, 0, 0, this.width, this.height );
                _intrandaImages[ canvas.id ] = {
                    smallWidth: this.width - 10,
                    smallHeight: this.height - 10,
                    largeUrl: d.image_large
                };
            };
            var image = d.image_small;
            // console.log(image);
            img.src = image;
            canvas.addEventListener( 'mouseout', drawOnCanvasMouseOut, false );
            canvas.addEventListener( 'mousemove', onMouseMove, false );
        }, 100 );
    }

    /**
     * @description Method to trigger mouseout event.
     * @method drawOnCanvasMouseOut
     */
    function drawOnCanvasMouseOut( event ) {
        drawOnCanvas( event.currentTarget );
    }

    /**
     * @description Method to get the position of the mouse cursor.
     * @method getMousePos
     * @param {Object} canvas The canvas object to draw on.
     * @param {Object} event The ebvent object which contains the mouse positions.
     */
    function getMousePos( canvas, event ) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: event.clientX - rect.left - 5,
            y: event.clientY - rect.top - 5
        };
    }
    /**
     * @description Method to prevent to submit a form twice.
     * @method preventDoubleSubmit
     * @param {Object} event The click event which triggers submit.
     */
    function preventDoubleSubmit(event) {
        var prevent = function(event) {
           event.preventDefault();
        }
        var oldOnclick = event.onclick;
        event.onclick = prevent;
        setTimeout(function() {
            event.onclick = oldOnclick;
        }, 700);
    }

    /**
     * @description Method to watch the mouse move event on canvas.
     * @method onMouseMove
     * @param {Object} event The mouse move event to watch.
     */
    function onMouseMove( event ) {
        var canvas = event.currentTarget;
        var img = new Image();
        img.onload = function() {
            if ( _intrandaImages[ canvas.id ] == null ) {
                return;
            }
            _intrandaImages[ canvas.id ].scaleX = ( img.width - _intrandaImages[ canvas.id ].smallWidth ) / _intrandaImages[ canvas.id ].smallWidth;
            _intrandaImages[ canvas.id ].scaleY = ( img.height - _intrandaImages[ canvas.id ].smallHeight ) / _intrandaImages[ canvas.id ].smallHeight;
            var pos = getMousePos( canvas, event );
            // check if mouse is still hovering over canvas
            if ( $( '#' + canvas.id + ':hover' ).length == 0 ) {
                return;
            }
            var scaleX = _intrandaImages[ canvas.id ].scaleX;
            var scaleY = _intrandaImages[ canvas.id ].scaleY;
            var ctx = canvas.getContext( '2d' );
            ctx.fillStyle = 'white';
            ctx.fillRect( 0, 0, canvas.width, canvas.height );
            var posX = pos.x * scaleX;
            var posY = pos.y * scaleY;
            if ( posX < 0 ) {
                posX = 0;
            }
            if ( posY < 0 ) {
                posY = 0;
            }
            if ( img.width - posX < canvas.width ) {
                posX = img.width - canvas.width;
            }
            if ( img.height - posY < canvas.height ) {
                posY = img.height - canvas.height;
            }
            ctx.drawImage( img, -posX, -posY );
        }
        if ( _intrandaImages[ canvas.id ] ) {
            img.src = _intrandaImages[ canvas.id ].largeUrl;
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        selector: '.textarea-html'
    };
    
    goobiWorkflow.tinymce = {
        /**
         * @description Method to initialize tinyMCE.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.tinymce.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            var extendedTinyMceConfig = {
                selector: _defaults.selector,
                extended_valid_elements: 'p',
                statusbar: true,
                theme: 'modern',
                height: 200,
                menu: {},
                plugins: [
                    'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
                    'searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking',
                    'save table contextmenu directionality emoticons template paste'],
                content_css: 'css/content.css',
                toolbar: 'undo redo | styleselect | bold italic underline strikethrough | bullist numlist | image table | fullscreen code',
                spellchecker_languages: 'English=en_US,German=de_DE_frami',
                //	spellchecker_rpc_url: 'spellchecker.php',
                spellchecker_callback: function (method, text, success, failure) {
                    tinymce.util.JSONRequest.sendRPC({
                        url: "template/js/plugins/tinymce/js/tinymce/plugins/spellchecker/spellchecker.php",
                        method: "spellcheck",
                        params: {
                            lang: this.getLanguage(),
                            words: text.match(this.getWordCharPattern())
                        },
                        success: function (result) {
                            success(result);
                        },
                        error: function (error, xhr) {
                            console.log(error, xhr);
                            failure("Spellcheck error:" + xhr.status);
                        }
                    });
                },
                style_formats: [
                    {
                        title: 'Headings', items: [
                            { title: 'Heading 1', format: 'h1' },
                            { title: 'Heading 2', format: 'h2' },
                            { title: 'Heading 3', format: 'h3' },
                            { title: 'Heading 4', format: 'h4' },
                            { title: 'Heading 5', format: 'h5' },
                            { title: 'Heading 6', format: 'h6' }
                        ]
                    },
                    {
                        title: 'Blocks', items: [
                            { title: 'Paragraph', format: 'p' },
                            { title: 'Blockquote', format: 'blockquote' },
                            { title: 'Div', format: 'div' },
                        ]
                    },
                ],
                init_instance_callback: function (editor) {
                    var readOnlyAttr = $("#" + editor.id.replace(":", "\\:")).attr(
                        "readonly");
                    if (readOnlyAttr === "readonly") {
                        editor.setMode("readonly");
                    }
                    try {
                        resizeReferenceFields();
                        $(editor.getWin()).bind('resize', function () {
                            resizeReferenceFields();
                        });
                    } catch (error) {
                    }
                },
                setup: function (editor) {
                    editor.on("blur", function (event, a, b) {
                        editor.save();
                        console.log("input id = ", editor.id.replace(/:/g, "\\:"));
                        $("#" + editor.id.replace(/:/g, "\\:")).trigger("change");
                    });
                    editor.on('change', function () {
                        tinymce.triggerSave();
                    });
                }

            };

            function initTinyMce() {
                tinymce.init(extendedTinyMceConfig);
            }

            function renderInputFields(ajaxData) {
                if (typeof tinyMCE !== 'undefined') {
                    if (ajaxData === undefined || ajaxData.status == "begin") {
                        for (edId in tinyMCE.editors) {
                            try {
                                tinyMCE.editors[edId].remove();
                                console.log("Removed editor " + edId);
                            } catch (error) {
                                console.log("Error occured during removing editors; ", error);
                            }
                        }
                    }
                    if (ajaxData === undefined || ajaxData.status == "success") {
                        initTinyMce(ajaxData);
                    }
                }
            }

            $(window).on("load", function () {
                renderInputFields();
            });
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );