<ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:x="http://myfaces.apache.org/tomahawk"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:intranda="http://xmlns.jcp.org/jsf/composite/composites"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:p="http://primefaces.org/ui"
	xmlns:jsf="http://xmlns.jcp.org/jsf">

	<composite:interface />

	<composite:implementation>

		<script type="text/javascript">
        	function switchExpanded(id){
        		console.log("called by: "+id);
				var x = document.getElementById(id).getAttribute("aria-expanded");
				console.log(x)
				if (x == "true"){
					x = "false"
				} else {
					x = "true"
				}
				document.getElementById(id).setAttribute("aria-expanded", x);
        	}



					// HANDLE TOOLTIPS
					/* TODO: move tooltip fns into a module */

					/* Locale switcher: Show and hide tooltips */
					function toggleLangTooltip(target) {
						const tooltip = bootstrap.Tooltip.getInstance(target)
						const dropdownToggle = target.querySelector(".nav-link");
						const dropdownIsExpanded = dropdownToggle.getAttribute('aria-expanded');

						// Mutation observer
						const observer = new MutationObserver((mutations, observerInstance) => {
							mutations.forEach(mutation => {
								// console.log(mutation, mutation.type)
								if(mutation.attributeName === 'aria-expanded') {
									if (dropdownIsExpanded === 'false') {
										tooltip.disable();
									}
									if (dropdownIsExpanded === 'true') {
										tooltip.enable();
										// Stop watching for mutations
										observerInstance.disconnect();
									}
								}
							})
						});

						if (dropdownIsExpanded === 'true') {
							tooltip.disable();
							// Start watching for mutations on the dropdown toggle's attributes
							observer.observe(dropdownToggle, {
								attributes: true,
							})
						}

						if (dropdownIsExpanded === 'false') {
							// If a user clicks on the dropdown toggle while the dropdown is expanded
							// => the tooltip is reenabled by the mutation observer (above)
							// => we will then show the tooltip using this BS5 fn
							tooltip.show();
						}
					}

					/* Help toggle: Remove old tooltip + init new tooltip after rerendering the toggle */
					const handleTooltip = (data) => {
						/* Remove tooltips + recreate them if JSF Ajax gets in the way */

						// get the element triggering the ajax call
						const trigger = bootstrap.Tooltip.getInstance(data.source)

						// remove associated tooltips
						if (trigger) trigger?.tip?.remove();

						// if ajax call is done, init a new tooltip
            if (data.status === 'success') {
							// get the rerendered trigger element
							const tooltipTrigger = document.querySelector('[data-goobi="handle-tooltip"]')
							// fire up a tooltip (new instances are enabled by default)
							new bootstrap.Tooltip(tooltipTrigger)
					}

					}
        </script>

		<div class="user">
			<div class="nav icon-nav">
				<!-- Icon to enable help texts -->
					<button
						type="button"
						class="nav-link btn-link"
						jsf:id="showHelp"
						title="#{NavigationForm.showHelp?msgs.hideHelpMessages:msgs.showHelpMessages}"
						aria-label="#{msgs.showHelpMessages}"
						data-bs-toggle="tooltip"
						data-bs-placement="bottom"
						data-goobi="handle-tooltip"
						>

						<i class="fa #{not NavigationForm.showHelp ? 'fa-question' : 'fa-question-circle'}"></i>
						<f:setPropertyActionListener
							target="#{NavigationForm.showHelp}"
							value="#{not NavigationForm.showHelp}" />
						<f:ajax render="@this" execute="@form"
							onevent="function(data) { toggle_help(data); handleTooltip(data);}" />
					</button>

				<!-- Language dropdown -->
				<div
						class="nav-item dropdown language-select"
						title="#{msgs.spracheAendern}"
						data-bs-toggle="tooltip"
						data-bs-placement="bottom"
						data-bs-trigger="hover"
						onclick="toggleLangTooltip(this)"
						>

					<a
						class="nav-link dropdown-toggle"
						href="#"
						role="button"
						data-bs-toggle="dropdown"
						aria-expanded="false"
						>

						<!-- Language icon -->
						<ui:include src="/uii/includes/svg/icon_language.xhtml" >
							<ui:param  name="iconClass" value="language-select__icon" />
						</ui:include>

						<span class="language-select__locale">#{SpracheForm.locale}</span>
					</a>
					<ul class="dropdown-menu">
						<ui:repeat
							var="availableLanguage"
							value="#{SpracheForm.supportedLocales}"
							id="plugin4">
							<li class="nav-item">
								<button
									jsf:id="locale"
									class="dropdown-item text_head btn-link"
									jsf:action="#{SpracheForm.SpracheUmschalten}">
									<f:param
										name="locale"
										value="#{availableLanguage.id}" />
									<f:setPropertyActionListener
										value="#{null}"
										target="#{SessionForm.dateFormatter}" />
									<span>
										<h:outputText value="#{msgs[availableLanguage.displayLanguageSelf]}" />
									</span>
								</button>
							</li>
						</ui:repeat>
					</ul>
				</div> <!-- end nav-item dropdown language-select -->
				</div>

				<!-- Account menu (only rendered when user is logged in) -->
				<!-- mailNotificationDisabled.xhtml does not need this block when no user is logged in -->
				<c:if test="#{LoginForm.myBenutzer != null}">
					<div class="nav-item user__account-menu dropdown">
						<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
							<span class="user__account-menu__name">
								<h:outputText
									rendered="#{LoginForm.myBenutzer != null}"
									value="#{LoginForm.myBenutzer.vorname} #{LoginForm.myBenutzer.nachname}" />
							</span>
							<c:if test="#{empty LoginForm.myBenutzer.imageUrl}">
								<img
									class="user__account-menu__avatar-default"
									alt=""
									src="templatePG/img/intranda.svg" />
							</c:if>
							<c:if test="#{not empty LoginForm.myBenutzer.imageUrl}">
								<img
									alt=""
									src="#{LoginForm.myBenutzer.imageUrl}" />
							</c:if>
						</a>

						<ul class="dropdown-menu">

							<!-- User settings -->
							<intranda:menuItem
								id="a50"
								linkClass="dropdown-item"
								parentMenu="menu_account"
								label="#{msgs.benutzerkonfiguration}"
								action="user_config"
								display="#{NavigationForm.uiStatus.user_config}"
								icon="fa fa-user-circle-o box-icon-fix-menu" />

							<!-- Change password -->
							<h:panelGroup rendered="#{HelperForm.passwordIsChangable}">
								<intranda:menuItem
									id="a51"
									linkClass="dropdown-item"
									parentMenu="menu_account"
									label="#{msgs.passwortAendern}"
									action="user_password"
									icon="fa fa-key box-icon-fix-menu" />
							</h:panelGroup>

							<!-- Logout -->
							<ui:fragment rendered="#{!LoginForm.showSSOLogoutPage}">
								<intranda:menuItem
									id="a52"
									linkClass="dropdown-item"
									parentMenu="menu_account"
									label="#{msgs.logout}"
									action="#{LoginForm.Ausloggen}"
									icon="fa fa-power-off box-icon-fix-menu" />
							</ui:fragment>
							<ui:fragment rendered="#{LoginForm.showSSOLogoutPage}">
								<intranda:menuItem
									id="openIdLogout"
									linkClass="dropdown-item"
									parentMenu="menu_account"
									label="#{msgs.logout}"
									action="#{LoginForm.logoutOpenId}"
									icon="fa fa-power-off box-icon-fix-menu" />
							</ui:fragment>

						</ul>
					</div> <!-- end nav-item user__account-menu dropdown -->
				</c:if>
			</div>
	</composite:implementation>
</ui:composition>
